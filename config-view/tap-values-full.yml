#@ load("@ytt:data", "data")
#@ load("@ytt:yaml", "yaml")

---
#@ def config():
profile: view
ceip_policy_disclosed: true

shared:
  ingress_domain: #@ data.values.tap.domains.main
  kubernetes_version: "1.24.5"

contour:
  envoy:
    service:
      type: LoadBalancer

tap_gui:
  service_type: ClusterIP
  ingressEnabled: "true"
  ingressDomain: #@ data.values.tap.domains.main
  tls:
    namespace: tanzu-system-ingress
    secretName: tls
  app_config:
    proxy:
      /metadata-store:
        target: #@ data.values.tap.credentials.metadataStore.target
        changeOrigin: true
        secure: false
        headers:
          Authorization: #@ data.values.tap.credentials.metadataStore.accessToken
          X-Custom-Source: project-star
    app:
      baseUrl: #@ "https://{}".format(data.values.tap.domains.tapGui)
    techdocs:
      builder: 'external'
      publisher:
        type: 'awsS3'
        awsS3:
          bucketName: #@ data.values.tap.credentials.aws_s3.bucketName
          credentials:
            accessKeyId: #@ data.values.tap.credentials.aws_s3.accessKeyId
            secretAccessKey: #@ data.values.tap.credentials.aws_s3.secretAccessKey
          region: #@ data.values.tap.credentials.aws_s3.region
          s3ForcePathStyle: false
    integrations:
      #@ if "github" in data.values.tap.credentials and "token" in data.values.tap.credentials.github:
      github:
      - host: github.com
        token: #@ data.values.tap.credentials.github.token
      #@ end
    catalog:
      locations: #@ data.values.tap.credentials.catalogs
    supplyChain:
      enablePlugin: true
    backend:
      baseUrl: #@ "https://{}".format(data.values.tap.domains.tapGui)
      cors:
        origin: #@ "https://{}".format(data.values.tap.domains.tapGui)
      #@ if "backstage" in data.values.tap.credentials and "database" in data.values.tap.credentials.backstage:
      backend:
        database:
          client: #@ data.values.tap.credentials.backstage.database.client
          connection:
            host: #@ data.values.tap.credentials.backstage.database.host
            port: #@ data.values.tap.credentials.backstage.database.port
            user: #@ data.values.tap.credentials.backstage.database.username
            password: #@ data.values.tap.credentials.backstage.database.password
            ssl: {rejectUnauthorized: true}
      #@ end
    #@ if "github" in data.values.tap.credentials and "clientId" in data.values.tap.credentials.github and "clientSecret" in data.values.tap.credentials.github:
    auth:
      environment: development
      providers:
        github:
          development:
            clientId: #@ data.values.tap.credentials.github.clientId
            clientSecret: #@ data.values.tap.credentials.github.clientSecret
    #@ end
    kubernetes:
      serviceLocatorMethod:
        type: 'multiTenant'
      clusterLocatorMethods:
        - type: 'config'
          clusters: #@ data.values.tap.credentials.clusters


learningcenter:
  ingressDomain: #@ data.values.tap.domains.learningCenter
  ingressSecret:
    secretName: tls

appliveview:
  ingressDomain: #@ data.values.tap.domains.appLiveView
  ingressEnabled: true
  tls:
    secretName: tls
    namespace: tanzu-system-ingress

#@ end
---
apiVersion: v1
kind: Secret
metadata:
  name: tap-values
  namespace: #@ data.values.tap.namespace
type: Opaque
stringData:
  values.yml: #@ yaml.encode(config())
---
apiVersion: packaging.carvel.dev/v1alpha1
kind: PackageInstall
metadata:
  name: tap
  namespace: #@ data.values.tap.namespace
  annotations:
    kapp.k14s.io/change-group: tap
    kapp.k14s.io/change-rule: "upsert after upserting tap-install/rbac"
    kapp.k14s.io/change-rule.repo: "upsert after upserting tap-install/tap-repo"
    ext.packaging.carvel.dev/ytt-paths-from-secret-name.0: "custom-labels"
spec:
  packageRef:
    refName: tap.tanzu.vmware.com
    versionSelection:
      constraints: #@ str(data.values.tap.version)
      prereleases: {}
  serviceAccountName: tap-default-sa
  values:
  - secretRef:
      name: tap-values
---
apiVersion: v1
kind: Secret
metadata:
  name: custom-labels
  namespace: #@ data.values.tap.namespace
stringData:
  add-custom-labels.yml: |
    #@ load("@ytt:overlay", "overlay")

    #@overlay/match by=overlay.subset({"kind":"PackageInstall"}),expects="1+"
    ---
    metadata:
      #@overlay/match missing_ok=True
      annotations:
        #@overlay/match missing_ok=True
        ext.packaging.carvel.dev/ytt-paths-from-secret-name.0: my-custom-labels

    ---
    apiVersion: v1
    kind: Secret
    metadata:
      name: my-custom-labels
    stringData:
      add-my-custom-labels.yml: |
        #@ load("@ytt:overlay", "overlay")

        #@overlay/match by=overlay.subset({"kind": "Namespace"}),expects="0+"
        ---
        metadata:
          #@overlay/match missing_ok=True
          labels:
            #@overlay/match missing_ok=True
            istio-injection: "false"
            #@overlay/match missing_ok=True
            tmc-policy: "false"
